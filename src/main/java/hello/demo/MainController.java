package hello.demo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.Arrays;
import java.util.List;
import java.util.NoSuchElementException;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;
  
  
  @PostMapping(path = "/{userId}/{day}/{timeInterval}/{stepCount}")
  public @ResponseBody String addStepCount(@PathVariable("userId") Integer userId,
                                @PathVariable("day") Integer day,
                                @PathVariable("timeInterval") Integer timeInterval,
                                @PathVariable("stepCount") Integer stepCount) {
    
    User user = new User();
    user.setUserId(userId);
    int step = getCurrentStepCount(userId);
    user.setStep(day, step + stepCount);
//    User user;
//    try {
////      synchronized (this) {
//      user = userRepository.findById(userId).get();
////      }
//    } catch (NoSuchElementException nsee) {
//      user = new User();
//      user.setUserId(userId);
//    }
//    user.addStep(day, stepCount);
    try {
      userRepository.save(user);
    } catch (Exception e) {
      System.out.println("Error while writing into db");
    }
    return "Success";
//    return user.getUserId() + " : " + user.getCurrentStepCount();
  }
  
  
  @GetMapping(path = "/current/{userId}")
  public @ResponseBody Integer getCurrentStepCount(@PathVariable("userId") Integer userId) {
    User user;
    try {
      user = userRepository.findById(userId).get();
    } catch (NoSuchElementException nsee) {
      return 0;
    }
    return user.getCurrentStepCount();
  }
  
  @GetMapping(path = "/single/{userId}/{day}")
  public @ResponseBody Integer getSingleStepCount(@PathVariable("userId") Integer userId,
                                                  @PathVariable("day") Integer day) {
    User user;
    try {
      user = userRepository.findById(userId).get();
    } catch (NoSuchElementException nsee) {
      return 0;
    }
    return user.getSingleStepCount(day);
  }
  
  @GetMapping(path = "/range/{userId}/{startDay}/{numDays}")
  public @ResponseBody
  List<Integer> getRangeStepCount(@PathVariable("userId") Integer userId,
                                    @PathVariable("startDay") Integer startDay,
                                  @PathVariable("numDays") Integer numDays) {
    User user = userRepository.findById(userId).get();
    return Arrays.asList(user.getCurrentStepCount());
  }
  
  
//  @GetMapping(path="/add") // Map ONLY GET Requests
//  public @ResponseBody
//  String addNewUser (@RequestParam String name
//      , @RequestParam String email) {
//    // @ResponseBody means the returned String is the response, not a view name
//    // @RequestParam means it is a parameter from the GET or POST request
//
//    User n = new User();
//    n.setName(name);
//    n.setEmail(email);
//    userRepository.save(n);
//    return "Saved";
//  }
//
  @GetMapping(path="/all")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }
}
